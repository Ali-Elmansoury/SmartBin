
SmartBin1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000618  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800060  00800060  00000618  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000648  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d1f  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000942  00000000  00000000  00001493  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000892  00000000  00000000  00001dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000022c  00000000  00000000  00002668  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d1  00000000  00000000  00002894  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000466  00000000  00000000  00002d65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000031cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_1>
   8:	0c 94 88 01 	jmp	0x310	; 0x310 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__vector_5>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 29 01 	jmp	0x252	; 0x252 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 37       	cpi	r26, 0x74	; 116
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "ultrasonic_1.h"
#include "servo.h"

void main()
{
	DDRA |= (1<<0); //buzzer
  7c:	8a b3       	in	r24, 0x1a	; 26
  7e:	81 60       	ori	r24, 0x01	; 1
  80:	8a bb       	out	0x1a, r24	; 26
	DDRD |= (1 << 4) | (1 << 5); // PWM Pins as Out
  82:	81 b3       	in	r24, 0x11	; 17
  84:	80 63       	ori	r24, 0x30	; 48
  86:	81 bb       	out	0x11, r24	; 17
	ultrasonic_init();
  88:	0e 94 81 00 	call	0x102	; 0x102 <ultrasonic_init>
	ultrasonic1_init();
  8c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <ultrasonic1_init>
	init_servo();
  90:	0e 94 5c 00 	call	0xb8	; 0xb8 <init_servo>
	sei();
  94:	78 94       	sei
	
	while(1)
	{
		ultrasonic_triger();
  96:	0e 94 8f 00 	call	0x11e	; 0x11e <ultrasonic_triger>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	87 ea       	ldi	r24, 0xA7	; 167
  9c:	91 e6       	ldi	r25, 0x61	; 97
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0x22>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x28>
  a4:	00 00       	nop
		_delay_ms(100);
		ultrasonic1_triger();
  a6:	0e 94 77 01 	call	0x2ee	; 0x2ee <ultrasonic1_triger>
  aa:	87 ea       	ldi	r24, 0xA7	; 167
  ac:	91 e6       	ldi	r25, 0x61	; 97
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x32>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x38>
  b4:	00 00       	nop
  b6:	ef cf       	rjmp	.-34     	; 0x96 <main+0x1a>

000000b8 <init_servo>:
#include "servo.h"

void init_servo()
{
	// Configure TIMER1
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11); // NON Inverted PWM
  b8:	8f b5       	in	r24, 0x2f	; 47
  ba:	82 6a       	ori	r24, 0xA2	; 162
  bc:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (0 << CS11) | (1 << CS10); // PRESCALER=8 MODE 14 (FAST PWM)
  be:	8e b5       	in	r24, 0x2e	; 46
  c0:	89 61       	ori	r24, 0x19	; 25
  c2:	8e bd       	out	0x2e, r24	; 46

	ICR1 = 19999; // fPWM=50Hz (Period = 20ms Standard).
  c4:	8f e1       	ldi	r24, 0x1F	; 31
  c6:	9e e4       	ldi	r25, 0x4E	; 78
  c8:	97 bd       	out	0x27, r25	; 39
  ca:	86 bd       	out	0x26, r24	; 38
  cc:	08 95       	ret

000000ce <set_servo_angle>:
}

void set_servo_angle(int angle)
{
	OCR1A = angle ;
  ce:	9b bd       	out	0x2b, r25	; 43
  d0:	8a bd       	out	0x2a, r24	; 42
  d2:	08 95       	ret

000000d4 <timer0_init>:
* Return Value: Nothing.
***********************************************************************/
void timer0_init(void)
{
	    	/* Disable Timer 0 */
	    	TCCR0 = DISABLE_MODULE_VALUE;
  d4:	13 be       	out	0x33, r1	; 51
	    	/* Setting pre scaler */
	    	TCCR0 = (PRESCLR1_VALUE);
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	83 bf       	out	0x33, r24	; 51
	    	/* Initializing the timer with zero */
	    	TCNT0 = ZER0_INITIALIZER;
  da:	12 be       	out	0x32, r1	; 50
				/* Timer overflow interrupt enable*/
				TIMSK |=(1<<TOIE0);
  dc:	89 b7       	in	r24, 0x39	; 57
  de:	81 60       	ori	r24, 0x01	; 1
  e0:	89 bf       	out	0x39, r24	; 57
  e2:	08 95       	ret

000000e4 <timer2_init>:
}

void timer2_init(void)
{
	/* Disable Timer 0 */
	TCCR2 = DISABLE_MODULE_VALUE;
  e4:	15 bc       	out	0x25, r1	; 37
	/* Setting pre scaler */
	TCCR2 = (PRESCLR1_VALUE);
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	85 bd       	out	0x25, r24	; 37
	/* Initializing the timer with zero */
	TCNT2 = ZER0_INITIALIZER;
  ea:	14 bc       	out	0x24, r1	; 36
	/* Timer overflow interrupt enable*/
	TIMSK |=(1<<TOIE2);
  ec:	89 b7       	in	r24, 0x39	; 57
  ee:	80 64       	ori	r24, 0x40	; 64
  f0:	89 bf       	out	0x39, r24	; 57
  f2:	08 95       	ret

000000f4 <enable_ex_interrupt0>:
  return;
}

void enable_ex_interrupt0(void){

  MCUCR |= (1<<ISC00);		// Trigger INT0 on any logic change.
  f4:	85 b7       	in	r24, 0x35	; 53
  f6:	81 60       	ori	r24, 0x01	; 1
  f8:	85 bf       	out	0x35, r24	; 53
  GICR  |= (1<<INT0);			// Enable INT0 interrupts.
  fa:	8b b7       	in	r24, 0x3b	; 59
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	8b bf       	out	0x3b, r24	; 59
 100:	08 95       	ret

00000102 <ultrasonic_init>:
uint32_t timer_counter=0;
uint32_t distance;

void ultrasonic_init(void){

  TRIGER_DDR|=(1<<TRIGER);
 102:	81 b3       	in	r24, 0x11	; 17
 104:	81 60       	ori	r24, 0x01	; 1
 106:	81 bb       	out	0x11, r24	; 17
  ECHO_DDR&=~(1<<ECHO);
 108:	81 b3       	in	r24, 0x11	; 17
 10a:	8b 7f       	andi	r24, 0xFB	; 251
 10c:	81 bb       	out	0x11, r24	; 17
  ECHO_PULLUP|=(1<<ECHO);
 10e:	82 b3       	in	r24, 0x12	; 18
 110:	84 60       	ori	r24, 0x04	; 4
 112:	82 bb       	out	0x12, r24	; 18
  enable_ex_interrupt0();
 114:	0e 94 7a 00 	call	0xf4	; 0xf4 <enable_ex_interrupt0>
  timer0_init();
 118:	0e 94 6a 00 	call	0xd4	; 0xd4 <timer0_init>
 11c:	08 95       	ret

0000011e <ultrasonic_triger>:

  return;
}

void ultrasonic_triger(void){
  if(!sensor_working){
 11e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <sensor_working>
 122:	81 11       	cpse	r24, r1
 124:	0c c0       	rjmp	.+24     	; 0x13e <ultrasonic_triger+0x20>
    TRIGER_PORT|=(1<<TRIGER);
 126:	82 b3       	in	r24, 0x12	; 18
 128:	81 60       	ori	r24, 0x01	; 1
 12a:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	85 e0       	ldi	r24, 0x05	; 5
 12e:	8a 95       	dec	r24
 130:	f1 f7       	brne	.-4      	; 0x12e <ultrasonic_triger+0x10>
    _delay_us(15);
    TRIGER_PORT&=~(1<<TRIGER);
 132:	82 b3       	in	r24, 0x12	; 18
 134:	8e 7f       	andi	r24, 0xFE	; 254
 136:	82 bb       	out	0x12, r24	; 18
    sensor_working=1;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <sensor_working>
 13e:	08 95       	ret

00000140 <__vector_1>:
  }
}

ISR(INT0_vect){
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	2f 93       	push	r18
 14c:	3f 93       	push	r19
 14e:	4f 93       	push	r20
 150:	5f 93       	push	r21
 152:	6f 93       	push	r22
 154:	7f 93       	push	r23
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	af 93       	push	r26
 15c:	bf 93       	push	r27
 15e:	ef 93       	push	r30
 160:	ff 93       	push	r31
  if(sensor_working==1){
 162:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <sensor_working>
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	09 f0       	breq	.+2      	; 0x16c <__vector_1+0x2c>
 16a:	62 c0       	rjmp	.+196    	; 0x230 <__vector_1+0xf0>
    if(rising_edge==0){
 16c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <rising_edge>
 170:	81 11       	cpse	r24, r1
 172:	0d c0       	rjmp	.+26     	; 0x18e <__vector_1+0x4e>
      TCNT0=0x00;
 174:	12 be       	out	0x32, r1	; 50
      rising_edge=1;
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <rising_edge>
      timer_counter=0;
 17c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 180:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 184:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 188:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 18c:	51 c0       	rjmp	.+162    	; 0x230 <__vector_1+0xf0>
    }
  else
  {
    distance=(timer_counter*256+TCNT0)/68;
 18e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 192:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 196:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 19a:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 19e:	ba 2f       	mov	r27, r26
 1a0:	a9 2f       	mov	r26, r25
 1a2:	98 2f       	mov	r25, r24
 1a4:	88 27       	eor	r24, r24
 1a6:	22 b7       	in	r18, 0x32	; 50
 1a8:	bc 01       	movw	r22, r24
 1aa:	cd 01       	movw	r24, r26
 1ac:	62 0f       	add	r22, r18
 1ae:	71 1d       	adc	r23, r1
 1b0:	81 1d       	adc	r24, r1
 1b2:	91 1d       	adc	r25, r1
 1b4:	24 e4       	ldi	r18, 0x44	; 68
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	40 e0       	ldi	r20, 0x00	; 0
 1ba:	50 e0       	ldi	r21, 0x00	; 0
 1bc:	0e 94 ae 02 	call	0x55c	; 0x55c <__udivmodsi4>
 1c0:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <distance>
 1c4:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <distance+0x1>
 1c8:	40 93 6e 00 	sts	0x006E, r20	; 0x80006e <distance+0x2>
 1cc:	50 93 6f 00 	sts	0x006F, r21	; 0x80006f <distance+0x3>
	if (distance<5.0)
 1d0:	ca 01       	movw	r24, r20
 1d2:	b9 01       	movw	r22, r18
 1d4:	0e 94 4d 02 	call	0x49a	; 0x49a <__floatunsisf>
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	40 ea       	ldi	r20, 0xA0	; 160
 1de:	50 e4       	ldi	r21, 0x40	; 64
 1e0:	0e 94 48 02 	call	0x490	; 0x490 <__cmpsf2>
 1e4:	88 23       	and	r24, r24
 1e6:	d4 f4       	brge	.+52     	; 0x21c <__vector_1+0xdc>
	{
		set_servo_angle(ANGLE_90);
 1e8:	86 eb       	ldi	r24, 0xB6	; 182
 1ea:	93 e0       	ldi	r25, 0x03	; 3
 1ec:	0e 94 67 00 	call	0xce	; 0xce <set_servo_angle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f0:	2f e3       	ldi	r18, 0x3F	; 63
 1f2:	8d e0       	ldi	r24, 0x0D	; 13
 1f4:	93 e0       	ldi	r25, 0x03	; 3
 1f6:	21 50       	subi	r18, 0x01	; 1
 1f8:	80 40       	sbci	r24, 0x00	; 0
 1fa:	90 40       	sbci	r25, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <__vector_1+0xb6>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <__vector_1+0xc0>
 200:	00 00       	nop
		_delay_ms(1000);
		set_servo_angle(ANGLE_0);
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 67 00 	call	0xce	; 0xce <set_servo_angle>
 20a:	2f e3       	ldi	r18, 0x3F	; 63
 20c:	8d e0       	ldi	r24, 0x0D	; 13
 20e:	93 e0       	ldi	r25, 0x03	; 3
 210:	21 50       	subi	r18, 0x01	; 1
 212:	80 40       	sbci	r24, 0x00	; 0
 214:	90 40       	sbci	r25, 0x00	; 0
 216:	e1 f7       	brne	.-8      	; 0x210 <__vector_1+0xd0>
 218:	00 c0       	rjmp	.+0      	; 0x21a <__vector_1+0xda>
 21a:	00 00       	nop
		_delay_ms(1000);
		
	}
    timer_counter=0;
 21c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 220:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 224:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 228:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    rising_edge=0;
 22c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <rising_edge>
  }
}
}
 230:	ff 91       	pop	r31
 232:	ef 91       	pop	r30
 234:	bf 91       	pop	r27
 236:	af 91       	pop	r26
 238:	9f 91       	pop	r25
 23a:	8f 91       	pop	r24
 23c:	7f 91       	pop	r23
 23e:	6f 91       	pop	r22
 240:	5f 91       	pop	r21
 242:	4f 91       	pop	r20
 244:	3f 91       	pop	r19
 246:	2f 91       	pop	r18
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

00000252 <__vector_11>:

ISR(TIMER0_OVF_vect){
 252:	1f 92       	push	r1
 254:	0f 92       	push	r0
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	0f 92       	push	r0
 25a:	11 24       	eor	r1, r1
 25c:	2f 93       	push	r18
 25e:	8f 93       	push	r24
 260:	9f 93       	push	r25
 262:	af 93       	push	r26
 264:	bf 93       	push	r27
    timer_counter++;
 266:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 26a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 26e:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 272:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 276:	01 96       	adiw	r24, 0x01	; 1
 278:	a1 1d       	adc	r26, r1
 27a:	b1 1d       	adc	r27, r1
 27c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 280:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 284:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 288:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    if(timer_counter >730){
 28c:	8b 3d       	cpi	r24, 0xDB	; 219
 28e:	92 40       	sbci	r25, 0x02	; 2
 290:	a1 05       	cpc	r26, r1
 292:	b1 05       	cpc	r27, r1
 294:	68 f0       	brcs	.+26     	; 0x2b0 <__vector_11+0x5e>
      TCNT0=0x00;
 296:	12 be       	out	0x32, r1	; 50
      sensor_working=0;
 298:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <sensor_working>
      rising_edge=0;
 29c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <rising_edge>
      timer_counter=0;
 2a0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 2a4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2a8:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 2ac:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    }
}
 2b0:	bf 91       	pop	r27
 2b2:	af 91       	pop	r26
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	2f 91       	pop	r18
 2ba:	0f 90       	pop	r0
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	0f 90       	pop	r0
 2c0:	1f 90       	pop	r1
 2c2:	18 95       	reti

000002c4 <enable_ex_interrupt1>:
  return;
}

void enable_ex_interrupt1(void){

  MCUCR |= (1<<ISC10);		// Trigger INT1 on any logic change.
 2c4:	85 b7       	in	r24, 0x35	; 53
 2c6:	84 60       	ori	r24, 0x04	; 4
 2c8:	85 bf       	out	0x35, r24	; 53
  GICR  |= (1<<INT1);			// Enable INT1 interrupts.
 2ca:	8b b7       	in	r24, 0x3b	; 59
 2cc:	80 68       	ori	r24, 0x80	; 128
 2ce:	8b bf       	out	0x3b, r24	; 59
 2d0:	08 95       	ret

000002d2 <ultrasonic1_init>:
uint32_t timer_counter1=0;
uint32_t distance1;

void ultrasonic1_init(void){

  TRIGER1_DDR|=(1<<TRIGER1);
 2d2:	81 b3       	in	r24, 0x11	; 17
 2d4:	82 60       	ori	r24, 0x02	; 2
 2d6:	81 bb       	out	0x11, r24	; 17
  ECHO1_DDR&=~(1<<ECHO1);
 2d8:	81 b3       	in	r24, 0x11	; 17
 2da:	87 7f       	andi	r24, 0xF7	; 247
 2dc:	81 bb       	out	0x11, r24	; 17
  ECHO1_PULLUP|=(1<<ECHO1);
 2de:	82 b3       	in	r24, 0x12	; 18
 2e0:	88 60       	ori	r24, 0x08	; 8
 2e2:	82 bb       	out	0x12, r24	; 18
  enable_ex_interrupt1();
 2e4:	0e 94 62 01 	call	0x2c4	; 0x2c4 <enable_ex_interrupt1>
  timer2_init();
 2e8:	0e 94 72 00 	call	0xe4	; 0xe4 <timer2_init>
 2ec:	08 95       	ret

000002ee <ultrasonic1_triger>:

  return;
}

void ultrasonic1_triger(void){
  if(!sensor_working1){
 2ee:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <sensor_working1>
 2f2:	81 11       	cpse	r24, r1
 2f4:	0c c0       	rjmp	.+24     	; 0x30e <ultrasonic1_triger+0x20>
    TRIGER1_PORT|=(1<<TRIGER1);
 2f6:	82 b3       	in	r24, 0x12	; 18
 2f8:	82 60       	ori	r24, 0x02	; 2
 2fa:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fc:	85 e0       	ldi	r24, 0x05	; 5
 2fe:	8a 95       	dec	r24
 300:	f1 f7       	brne	.-4      	; 0x2fe <ultrasonic1_triger+0x10>
    _delay_us(15);
    TRIGER1_PORT&=~(1<<TRIGER1);
 302:	82 b3       	in	r24, 0x12	; 18
 304:	8d 7f       	andi	r24, 0xFD	; 253
 306:	82 bb       	out	0x12, r24	; 18
    sensor_working1=1;
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <sensor_working1>
 30e:	08 95       	ret

00000310 <__vector_2>:
  }
}

ISR(INT1_vect){
 310:	1f 92       	push	r1
 312:	0f 92       	push	r0
 314:	0f b6       	in	r0, 0x3f	; 63
 316:	0f 92       	push	r0
 318:	11 24       	eor	r1, r1
 31a:	2f 93       	push	r18
 31c:	3f 93       	push	r19
 31e:	4f 93       	push	r20
 320:	5f 93       	push	r21
 322:	6f 93       	push	r22
 324:	7f 93       	push	r23
 326:	8f 93       	push	r24
 328:	9f 93       	push	r25
 32a:	af 93       	push	r26
 32c:	bf 93       	push	r27
 32e:	ef 93       	push	r30
 330:	ff 93       	push	r31
  if(sensor_working1==1){
 332:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <sensor_working1>
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	09 f0       	breq	.+2      	; 0x33c <__vector_2+0x2c>
 33a:	60 c0       	rjmp	.+192    	; 0x3fc <__vector_2+0xec>
    if(rising_edge1==0){
 33c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <rising_edge1>
 340:	81 11       	cpse	r24, r1
 342:	0d c0       	rjmp	.+26     	; 0x35e <__vector_2+0x4e>
      TCNT2=0x00;
 344:	14 bc       	out	0x24, r1	; 36
      rising_edge1=1;
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <rising_edge1>
      timer_counter1=0;
 34c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <timer_counter1>
 350:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <timer_counter1+0x1>
 354:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <timer_counter1+0x2>
 358:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <timer_counter1+0x3>
 35c:	4f c0       	rjmp	.+158    	; 0x3fc <__vector_2+0xec>
    }
  else{
    distance1=(timer_counter1*256+TCNT2)/68;
 35e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <timer_counter1>
 362:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <timer_counter1+0x1>
 366:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <timer_counter1+0x2>
 36a:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <timer_counter1+0x3>
 36e:	ba 2f       	mov	r27, r26
 370:	a9 2f       	mov	r26, r25
 372:	98 2f       	mov	r25, r24
 374:	88 27       	eor	r24, r24
 376:	24 b5       	in	r18, 0x24	; 36
 378:	bc 01       	movw	r22, r24
 37a:	cd 01       	movw	r24, r26
 37c:	62 0f       	add	r22, r18
 37e:	71 1d       	adc	r23, r1
 380:	81 1d       	adc	r24, r1
 382:	91 1d       	adc	r25, r1
 384:	24 e4       	ldi	r18, 0x44	; 68
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	40 e0       	ldi	r20, 0x00	; 0
 38a:	50 e0       	ldi	r21, 0x00	; 0
 38c:	0e 94 ae 02 	call	0x55c	; 0x55c <__udivmodsi4>
 390:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <distance1>
 394:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <distance1+0x1>
 398:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <distance1+0x2>
 39c:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <distance1+0x3>
	if (distance1<5.0)
 3a0:	ca 01       	movw	r24, r20
 3a2:	b9 01       	movw	r22, r18
 3a4:	0e 94 4d 02 	call	0x49a	; 0x49a <__floatunsisf>
 3a8:	20 e0       	ldi	r18, 0x00	; 0
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	40 ea       	ldi	r20, 0xA0	; 160
 3ae:	50 e4       	ldi	r21, 0x40	; 64
 3b0:	0e 94 48 02 	call	0x490	; 0x490 <__cmpsf2>
 3b4:	88 23       	and	r24, r24
 3b6:	c4 f4       	brge	.+48     	; 0x3e8 <__vector_2+0xd8>
	{
		PORTA |= (1<<0);
 3b8:	8b b3       	in	r24, 0x1b	; 27
 3ba:	81 60       	ori	r24, 0x01	; 1
 3bc:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3be:	2f e3       	ldi	r18, 0x3F	; 63
 3c0:	8d e0       	ldi	r24, 0x0D	; 13
 3c2:	93 e0       	ldi	r25, 0x03	; 3
 3c4:	21 50       	subi	r18, 0x01	; 1
 3c6:	80 40       	sbci	r24, 0x00	; 0
 3c8:	90 40       	sbci	r25, 0x00	; 0
 3ca:	e1 f7       	brne	.-8      	; 0x3c4 <__vector_2+0xb4>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <__vector_2+0xbe>
 3ce:	00 00       	nop
		_delay_ms(1000);
		PORTA &= ~(1<<0);
 3d0:	8b b3       	in	r24, 0x1b	; 27
 3d2:	8e 7f       	andi	r24, 0xFE	; 254
 3d4:	8b bb       	out	0x1b, r24	; 27
 3d6:	2f e3       	ldi	r18, 0x3F	; 63
 3d8:	8d e0       	ldi	r24, 0x0D	; 13
 3da:	93 e0       	ldi	r25, 0x03	; 3
 3dc:	21 50       	subi	r18, 0x01	; 1
 3de:	80 40       	sbci	r24, 0x00	; 0
 3e0:	90 40       	sbci	r25, 0x00	; 0
 3e2:	e1 f7       	brne	.-8      	; 0x3dc <__vector_2+0xcc>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <__vector_2+0xd6>
 3e6:	00 00       	nop
		_delay_ms(1000);
	}
    timer_counter1=0;
 3e8:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <timer_counter1>
 3ec:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <timer_counter1+0x1>
 3f0:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <timer_counter1+0x2>
 3f4:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <timer_counter1+0x3>
    rising_edge1=0;
 3f8:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <rising_edge1>
  }
}}
 3fc:	ff 91       	pop	r31
 3fe:	ef 91       	pop	r30
 400:	bf 91       	pop	r27
 402:	af 91       	pop	r26
 404:	9f 91       	pop	r25
 406:	8f 91       	pop	r24
 408:	7f 91       	pop	r23
 40a:	6f 91       	pop	r22
 40c:	5f 91       	pop	r21
 40e:	4f 91       	pop	r20
 410:	3f 91       	pop	r19
 412:	2f 91       	pop	r18
 414:	0f 90       	pop	r0
 416:	0f be       	out	0x3f, r0	; 63
 418:	0f 90       	pop	r0
 41a:	1f 90       	pop	r1
 41c:	18 95       	reti

0000041e <__vector_5>:

ISR(TIMER2_OVF_vect){
 41e:	1f 92       	push	r1
 420:	0f 92       	push	r0
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	0f 92       	push	r0
 426:	11 24       	eor	r1, r1
 428:	2f 93       	push	r18
 42a:	8f 93       	push	r24
 42c:	9f 93       	push	r25
 42e:	af 93       	push	r26
 430:	bf 93       	push	r27
    timer_counter1++;
 432:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <timer_counter1>
 436:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <timer_counter1+0x1>
 43a:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <timer_counter1+0x2>
 43e:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <timer_counter1+0x3>
 442:	01 96       	adiw	r24, 0x01	; 1
 444:	a1 1d       	adc	r26, r1
 446:	b1 1d       	adc	r27, r1
 448:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <timer_counter1>
 44c:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <timer_counter1+0x1>
 450:	a0 93 68 00 	sts	0x0068, r26	; 0x800068 <timer_counter1+0x2>
 454:	b0 93 69 00 	sts	0x0069, r27	; 0x800069 <timer_counter1+0x3>
    if(timer_counter1 >730){
 458:	8b 3d       	cpi	r24, 0xDB	; 219
 45a:	92 40       	sbci	r25, 0x02	; 2
 45c:	a1 05       	cpc	r26, r1
 45e:	b1 05       	cpc	r27, r1
 460:	68 f0       	brcs	.+26     	; 0x47c <__vector_5+0x5e>
      TCNT2=0x00;
 462:	14 bc       	out	0x24, r1	; 36
      sensor_working1=0;
 464:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <sensor_working1>
      rising_edge1=0;
 468:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <rising_edge1>
      timer_counter1=0;
 46c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <timer_counter1>
 470:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <timer_counter1+0x1>
 474:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <timer_counter1+0x2>
 478:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <timer_counter1+0x3>
    }
}
 47c:	bf 91       	pop	r27
 47e:	af 91       	pop	r26
 480:	9f 91       	pop	r25
 482:	8f 91       	pop	r24
 484:	2f 91       	pop	r18
 486:	0f 90       	pop	r0
 488:	0f be       	out	0x3f, r0	; 63
 48a:	0f 90       	pop	r0
 48c:	1f 90       	pop	r1
 48e:	18 95       	reti

00000490 <__cmpsf2>:
 490:	0e 94 8a 02 	call	0x514	; 0x514 <__fp_cmp>
 494:	08 f4       	brcc	.+2      	; 0x498 <__cmpsf2+0x8>
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	08 95       	ret

0000049a <__floatunsisf>:
 49a:	e8 94       	clt
 49c:	09 c0       	rjmp	.+18     	; 0x4b0 <__floatsisf+0x12>

0000049e <__floatsisf>:
 49e:	97 fb       	bst	r25, 7
 4a0:	3e f4       	brtc	.+14     	; 0x4b0 <__floatsisf+0x12>
 4a2:	90 95       	com	r25
 4a4:	80 95       	com	r24
 4a6:	70 95       	com	r23
 4a8:	61 95       	neg	r22
 4aa:	7f 4f       	sbci	r23, 0xFF	; 255
 4ac:	8f 4f       	sbci	r24, 0xFF	; 255
 4ae:	9f 4f       	sbci	r25, 0xFF	; 255
 4b0:	99 23       	and	r25, r25
 4b2:	a9 f0       	breq	.+42     	; 0x4de <__floatsisf+0x40>
 4b4:	f9 2f       	mov	r31, r25
 4b6:	96 e9       	ldi	r25, 0x96	; 150
 4b8:	bb 27       	eor	r27, r27
 4ba:	93 95       	inc	r25
 4bc:	f6 95       	lsr	r31
 4be:	87 95       	ror	r24
 4c0:	77 95       	ror	r23
 4c2:	67 95       	ror	r22
 4c4:	b7 95       	ror	r27
 4c6:	f1 11       	cpse	r31, r1
 4c8:	f8 cf       	rjmp	.-16     	; 0x4ba <__floatsisf+0x1c>
 4ca:	fa f4       	brpl	.+62     	; 0x50a <__floatsisf+0x6c>
 4cc:	bb 0f       	add	r27, r27
 4ce:	11 f4       	brne	.+4      	; 0x4d4 <__floatsisf+0x36>
 4d0:	60 ff       	sbrs	r22, 0
 4d2:	1b c0       	rjmp	.+54     	; 0x50a <__floatsisf+0x6c>
 4d4:	6f 5f       	subi	r22, 0xFF	; 255
 4d6:	7f 4f       	sbci	r23, 0xFF	; 255
 4d8:	8f 4f       	sbci	r24, 0xFF	; 255
 4da:	9f 4f       	sbci	r25, 0xFF	; 255
 4dc:	16 c0       	rjmp	.+44     	; 0x50a <__floatsisf+0x6c>
 4de:	88 23       	and	r24, r24
 4e0:	11 f0       	breq	.+4      	; 0x4e6 <__floatsisf+0x48>
 4e2:	96 e9       	ldi	r25, 0x96	; 150
 4e4:	11 c0       	rjmp	.+34     	; 0x508 <__floatsisf+0x6a>
 4e6:	77 23       	and	r23, r23
 4e8:	21 f0       	breq	.+8      	; 0x4f2 <__floatsisf+0x54>
 4ea:	9e e8       	ldi	r25, 0x8E	; 142
 4ec:	87 2f       	mov	r24, r23
 4ee:	76 2f       	mov	r23, r22
 4f0:	05 c0       	rjmp	.+10     	; 0x4fc <__floatsisf+0x5e>
 4f2:	66 23       	and	r22, r22
 4f4:	71 f0       	breq	.+28     	; 0x512 <__floatsisf+0x74>
 4f6:	96 e8       	ldi	r25, 0x86	; 134
 4f8:	86 2f       	mov	r24, r22
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	60 e0       	ldi	r22, 0x00	; 0
 4fe:	2a f0       	brmi	.+10     	; 0x50a <__floatsisf+0x6c>
 500:	9a 95       	dec	r25
 502:	66 0f       	add	r22, r22
 504:	77 1f       	adc	r23, r23
 506:	88 1f       	adc	r24, r24
 508:	da f7       	brpl	.-10     	; 0x500 <__floatsisf+0x62>
 50a:	88 0f       	add	r24, r24
 50c:	96 95       	lsr	r25
 50e:	87 95       	ror	r24
 510:	97 f9       	bld	r25, 7
 512:	08 95       	ret

00000514 <__fp_cmp>:
 514:	99 0f       	add	r25, r25
 516:	00 08       	sbc	r0, r0
 518:	55 0f       	add	r21, r21
 51a:	aa 0b       	sbc	r26, r26
 51c:	e0 e8       	ldi	r30, 0x80	; 128
 51e:	fe ef       	ldi	r31, 0xFE	; 254
 520:	16 16       	cp	r1, r22
 522:	17 06       	cpc	r1, r23
 524:	e8 07       	cpc	r30, r24
 526:	f9 07       	cpc	r31, r25
 528:	c0 f0       	brcs	.+48     	; 0x55a <__fp_cmp+0x46>
 52a:	12 16       	cp	r1, r18
 52c:	13 06       	cpc	r1, r19
 52e:	e4 07       	cpc	r30, r20
 530:	f5 07       	cpc	r31, r21
 532:	98 f0       	brcs	.+38     	; 0x55a <__fp_cmp+0x46>
 534:	62 1b       	sub	r22, r18
 536:	73 0b       	sbc	r23, r19
 538:	84 0b       	sbc	r24, r20
 53a:	95 0b       	sbc	r25, r21
 53c:	39 f4       	brne	.+14     	; 0x54c <__fp_cmp+0x38>
 53e:	0a 26       	eor	r0, r26
 540:	61 f0       	breq	.+24     	; 0x55a <__fp_cmp+0x46>
 542:	23 2b       	or	r18, r19
 544:	24 2b       	or	r18, r20
 546:	25 2b       	or	r18, r21
 548:	21 f4       	brne	.+8      	; 0x552 <__fp_cmp+0x3e>
 54a:	08 95       	ret
 54c:	0a 26       	eor	r0, r26
 54e:	09 f4       	brne	.+2      	; 0x552 <__fp_cmp+0x3e>
 550:	a1 40       	sbci	r26, 0x01	; 1
 552:	a6 95       	lsr	r26
 554:	8f ef       	ldi	r24, 0xFF	; 255
 556:	81 1d       	adc	r24, r1
 558:	81 1d       	adc	r24, r1
 55a:	08 95       	ret

0000055c <__udivmodsi4>:
 55c:	a1 e2       	ldi	r26, 0x21	; 33
 55e:	1a 2e       	mov	r1, r26
 560:	aa 1b       	sub	r26, r26
 562:	bb 1b       	sub	r27, r27
 564:	fd 01       	movw	r30, r26
 566:	0d c0       	rjmp	.+26     	; 0x582 <__udivmodsi4_ep>

00000568 <__udivmodsi4_loop>:
 568:	aa 1f       	adc	r26, r26
 56a:	bb 1f       	adc	r27, r27
 56c:	ee 1f       	adc	r30, r30
 56e:	ff 1f       	adc	r31, r31
 570:	a2 17       	cp	r26, r18
 572:	b3 07       	cpc	r27, r19
 574:	e4 07       	cpc	r30, r20
 576:	f5 07       	cpc	r31, r21
 578:	20 f0       	brcs	.+8      	; 0x582 <__udivmodsi4_ep>
 57a:	a2 1b       	sub	r26, r18
 57c:	b3 0b       	sbc	r27, r19
 57e:	e4 0b       	sbc	r30, r20
 580:	f5 0b       	sbc	r31, r21

00000582 <__udivmodsi4_ep>:
 582:	66 1f       	adc	r22, r22
 584:	77 1f       	adc	r23, r23
 586:	88 1f       	adc	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	1a 94       	dec	r1
 58c:	69 f7       	brne	.-38     	; 0x568 <__udivmodsi4_loop>
 58e:	60 95       	com	r22
 590:	70 95       	com	r23
 592:	80 95       	com	r24
 594:	90 95       	com	r25
 596:	9b 01       	movw	r18, r22
 598:	ac 01       	movw	r20, r24
 59a:	bd 01       	movw	r22, r26
 59c:	cf 01       	movw	r24, r30
 59e:	08 95       	ret

000005a0 <_exit>:
 5a0:	f8 94       	cli

000005a2 <__stop_program>:
 5a2:	ff cf       	rjmp	.-2      	; 0x5a2 <__stop_program>
