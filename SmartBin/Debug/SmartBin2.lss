
SmartBin2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800060  00800060  00000530  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000560  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ab9  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000074e  00000000  00000000  00001105  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000670  00000000  00000000  00001853  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00001ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000471  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000033e  00000000  00000000  000024b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000027f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_1>
   8:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 37       	cpi	r26, 0x71	; 113
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "ultrasonic.h"
#include "servo.h"

void main()
{
	DDRA |= (1 << 0) | (1 << 2); //buzzer, red led
  7c:	8a b3       	in	r24, 0x1a	; 26
  7e:	85 60       	ori	r24, 0x05	; 5
  80:	8a bb       	out	0x1a, r24	; 26
	DDRD |= (1 << 4) | (1 << 5); // PWM Pins as Out
  82:	81 b3       	in	r24, 0x11	; 17
  84:	80 63       	ori	r24, 0x30	; 48
  86:	81 bb       	out	0x11, r24	; 17
	DDRC |= (1 << 1) ; //1-23 Green
  88:	84 b3       	in	r24, 0x14	; 20
  8a:	82 60       	ori	r24, 0x02	; 2
  8c:	84 bb       	out	0x14, r24	; 20
	ultrasonic_init();
  8e:	0e 94 72 00 	call	0xe4	; 0xe4 <ultrasonic_init>
	init_servo();
  92:	0e 94 55 00 	call	0xaa	; 0xaa <init_servo>
	sei();
  96:	78 94       	sei
	
	while(1)
	{
		ultrasonic_triger();
  98:	0e 94 89 00 	call	0x112	; 0x112 <ultrasonic_triger>
		PORTC |= (1 << 1);
  9c:	85 b3       	in	r24, 0x15	; 21
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	85 bb       	out	0x15, r24	; 21
		PORTA &= ~(1 << 2);
  a2:	8b b3       	in	r24, 0x1b	; 27
  a4:	8b 7f       	andi	r24, 0xFB	; 251
  a6:	8b bb       	out	0x1b, r24	; 27
  a8:	f7 cf       	rjmp	.-18     	; 0x98 <main+0x1c>

000000aa <init_servo>:
#include "servo.h"

void init_servo()
{
	// Configure TIMER1
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11); // NON Inverted PWM
  aa:	8f b5       	in	r24, 0x2f	; 47
  ac:	82 6a       	ori	r24, 0xA2	; 162
  ae:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (0 << CS11) | (1 << CS10); // PRESCALER=1 MODE 14 (FAST PWM)
  b0:	8e b5       	in	r24, 0x2e	; 46
  b2:	89 61       	ori	r24, 0x19	; 25
  b4:	8e bd       	out	0x2e, r24	; 46

	ICR1 = 19999; // fPWM=50Hz (Period = 20ms Standard).
  b6:	8f e1       	ldi	r24, 0x1F	; 31
  b8:	9e e4       	ldi	r25, 0x4E	; 78
  ba:	97 bd       	out	0x27, r25	; 39
  bc:	86 bd       	out	0x26, r24	; 38
  be:	08 95       	ret

000000c0 <set_servo_angle>:
}

void set_servo_angle(int angle)
{
	OCR1A = angle ;
  c0:	9b bd       	out	0x2b, r25	; 43
  c2:	8a bd       	out	0x2a, r24	; 42
  c4:	08 95       	ret

000000c6 <timer0_init>:
* Return Value: Nothing.
***********************************************************************/
void timer0_init(void)
{
	    	/* Disable Timer 0 */
	    	TCCR0 = DISABLE_MODULE_VALUE;
  c6:	13 be       	out	0x33, r1	; 51
	    	/* Setting pre scaler */
	    	TCCR0 = (PRESCLR1_VALUE);
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	83 bf       	out	0x33, r24	; 51
	    	/* Initializing the timer with zero */
	    	TCNT0 = ZER0_INITIALIZER;
  cc:	12 be       	out	0x32, r1	; 50
				/* Timer overflow interrupt enable*/
				TIMSK |=(1<<TOIE0);
  ce:	89 b7       	in	r24, 0x39	; 57
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	89 bf       	out	0x39, r24	; 57
  d4:	08 95       	ret

000000d6 <enable_ex_interrupts>:
  return;
}

void enable_ex_interrupts(void){

  MCUCR |= (1<<ISC00)|(1<<ISC10);		// Trigger INT0,INT1 on any logic change.
  d6:	85 b7       	in	r24, 0x35	; 53
  d8:	85 60       	ori	r24, 0x05	; 5
  da:	85 bf       	out	0x35, r24	; 53
  GICR  |= (1<<INT0)|(1<<INT1);			// Enable INT0,INT1 interrupts.
  dc:	8b b7       	in	r24, 0x3b	; 59
  de:	80 6c       	ori	r24, 0xC0	; 192
  e0:	8b bf       	out	0x3b, r24	; 59
  e2:	08 95       	ret

000000e4 <ultrasonic_init>:
volatile uint8_t sensor1_working = 0; // flag to indicate if sensor 1 is working
volatile uint8_t sensor2_working = 0; // flag to indicate if sensor 2 is working

void ultrasonic_init(void){

  TRIGER_DDR|=(1<<TRIGER);
  e4:	8a b3       	in	r24, 0x1a	; 26
  e6:	80 62       	ori	r24, 0x20	; 32
  e8:	8a bb       	out	0x1a, r24	; 26
  ECHO_DDR&=~(1<<ECHO);
  ea:	81 b3       	in	r24, 0x11	; 17
  ec:	8b 7f       	andi	r24, 0xFB	; 251
  ee:	81 bb       	out	0x11, r24	; 17
  ECHO_PULLUP|=(1<<ECHO);
  f0:	82 b3       	in	r24, 0x12	; 18
  f2:	84 60       	ori	r24, 0x04	; 4
  f4:	82 bb       	out	0x12, r24	; 18
  enable_ex_interrupts();
  f6:	0e 94 6b 00 	call	0xd6	; 0xd6 <enable_ex_interrupts>
  timer0_init();
  fa:	0e 94 63 00 	call	0xc6	; 0xc6 <timer0_init>
  
  TRIGER1_DDR|=(1<<TRIGER1);
  fe:	8a b3       	in	r24, 0x1a	; 26
 100:	80 68       	ori	r24, 0x80	; 128
 102:	8a bb       	out	0x1a, r24	; 26
  ECHO1_DDR&=~(1<<ECHO1);
 104:	81 b3       	in	r24, 0x11	; 17
 106:	87 7f       	andi	r24, 0xF7	; 247
 108:	81 bb       	out	0x11, r24	; 17
  ECHO1_PULLUP|=(1<<ECHO1);
 10a:	82 b3       	in	r24, 0x12	; 18
 10c:	88 60       	ori	r24, 0x08	; 8
 10e:	82 bb       	out	0x12, r24	; 18
 110:	08 95       	ret

00000112 <ultrasonic_triger>:

  return;
}

void ultrasonic_triger(void){
  if(!sensor_working){
 112:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <sensor_working>
 116:	81 11       	cpse	r24, r1
 118:	0c c0       	rjmp	.+24     	; 0x132 <ultrasonic_triger+0x20>
    TRIGER_PORT|=(1<<TRIGER);
 11a:	8b b3       	in	r24, 0x1b	; 27
 11c:	80 62       	ori	r24, 0x20	; 32
 11e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	85 e0       	ldi	r24, 0x05	; 5
 122:	8a 95       	dec	r24
 124:	f1 f7       	brne	.-4      	; 0x122 <ultrasonic_triger+0x10>
    _delay_us(15);
    TRIGER_PORT&=~(1<<TRIGER);
 126:	8b b3       	in	r24, 0x1b	; 27
 128:	8f 7d       	andi	r24, 0xDF	; 223
 12a:	8b bb       	out	0x1b, r24	; 27
    sensor_working=1;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <sensor_working>
  }
  
  if(!sensor_working1){
 132:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <sensor_working1>
 136:	81 11       	cpse	r24, r1
 138:	0c c0       	rjmp	.+24     	; 0x152 <ultrasonic_triger+0x40>
	  TRIGER1_PORT|=(1<<TRIGER1);
 13a:	8b b3       	in	r24, 0x1b	; 27
 13c:	80 68       	ori	r24, 0x80	; 128
 13e:	8b bb       	out	0x1b, r24	; 27
 140:	85 e0       	ldi	r24, 0x05	; 5
 142:	8a 95       	dec	r24
 144:	f1 f7       	brne	.-4      	; 0x142 <ultrasonic_triger+0x30>
	  _delay_us(15);
	  TRIGER1_PORT&=~(1<<TRIGER1);
 146:	8b b3       	in	r24, 0x1b	; 27
 148:	8f 77       	andi	r24, 0x7F	; 127
 14a:	8b bb       	out	0x1b, r24	; 27
	  sensor_working1=1;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <sensor_working1>
 152:	08 95       	ret

00000154 <__vector_1>:
  }
}

ISR(INT0_vect){
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	2f 93       	push	r18
 160:	3f 93       	push	r19
 162:	4f 93       	push	r20
 164:	5f 93       	push	r21
 166:	6f 93       	push	r22
 168:	7f 93       	push	r23
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
 16e:	af 93       	push	r26
 170:	bf 93       	push	r27
 172:	ef 93       	push	r30
 174:	ff 93       	push	r31
	if (sensor2_working == 0) { // check if sensor 2 is not in use
 176:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 17a:	81 11       	cpse	r24, r1
 17c:	6d c0       	rjmp	.+218    	; 0x258 <__vector_1+0x104>
		sensor1_working = 1; // set flag to indicate that sensor 1 is in use
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <sensor1_working>
		if (rising_edge == 0){
 184:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <rising_edge>
 188:	81 11       	cpse	r24, r1
 18a:	0d c0       	rjmp	.+26     	; 0x1a6 <__vector_1+0x52>
			TCNT0 = 0x00;
 18c:	12 be       	out	0x32, r1	; 50
			rising_edge = 1;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <rising_edge>
			timer_counter = 0;
 194:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <timer_counter>
 198:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <timer_counter+0x1>
 19c:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <timer_counter+0x2>
 1a0:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <timer_counter+0x3>
 1a4:	59 c0       	rjmp	.+178    	; 0x258 <__vector_1+0x104>
			} else {
			distance = (timer_counter * 256 + TCNT0) / 68;
 1a6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <timer_counter>
 1aa:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <timer_counter+0x1>
 1ae:	a0 91 65 00 	lds	r26, 0x0065	; 0x800065 <timer_counter+0x2>
 1b2:	b0 91 66 00 	lds	r27, 0x0066	; 0x800066 <timer_counter+0x3>
 1b6:	ba 2f       	mov	r27, r26
 1b8:	a9 2f       	mov	r26, r25
 1ba:	98 2f       	mov	r25, r24
 1bc:	88 27       	eor	r24, r24
 1be:	22 b7       	in	r18, 0x32	; 50
 1c0:	bc 01       	movw	r22, r24
 1c2:	cd 01       	movw	r24, r26
 1c4:	62 0f       	add	r22, r18
 1c6:	71 1d       	adc	r23, r1
 1c8:	81 1d       	adc	r24, r1
 1ca:	91 1d       	adc	r25, r1
 1cc:	24 e4       	ldi	r18, 0x44	; 68
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	50 e0       	ldi	r21, 0x00	; 0
 1d4:	0e 94 3a 02 	call	0x474	; 0x474 <__udivmodsi4>
 1d8:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <distance>
 1dc:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <distance+0x1>
 1e0:	40 93 6b 00 	sts	0x006B, r20	; 0x80006b <distance+0x2>
 1e4:	50 93 6c 00 	sts	0x006C, r21	; 0x80006c <distance+0x3>
			if (distance < 20.0) {
 1e8:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <distance>
 1ec:	70 91 6a 00 	lds	r23, 0x006A	; 0x80006a <distance+0x1>
 1f0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <distance+0x2>
 1f4:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <distance+0x3>
 1f8:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__floatunsisf>
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	40 ea       	ldi	r20, 0xA0	; 160
 202:	51 e4       	ldi	r21, 0x41	; 65
 204:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__cmpsf2>
 208:	88 23       	and	r24, r24
 20a:	d4 f4       	brge	.+52     	; 0x240 <__vector_1+0xec>
				set_servo_angle(ANGLE_180);
 20c:	8c e6       	ldi	r24, 0x6C	; 108
 20e:	97 e0       	ldi	r25, 0x07	; 7
 210:	0e 94 60 00 	call	0xc0	; 0xc0 <set_servo_angle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 214:	2f e3       	ldi	r18, 0x3F	; 63
 216:	82 e4       	ldi	r24, 0x42	; 66
 218:	9f e0       	ldi	r25, 0x0F	; 15
 21a:	21 50       	subi	r18, 0x01	; 1
 21c:	80 40       	sbci	r24, 0x00	; 0
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <__vector_1+0xc6>
 222:	00 c0       	rjmp	.+0      	; 0x224 <__vector_1+0xd0>
 224:	00 00       	nop
				_delay_ms(5000);
				set_servo_angle(ANGLE_90);
 226:	86 eb       	ldi	r24, 0xB6	; 182
 228:	93 e0       	ldi	r25, 0x03	; 3
 22a:	0e 94 60 00 	call	0xc0	; 0xc0 <set_servo_angle>
 22e:	2f e3       	ldi	r18, 0x3F	; 63
 230:	8d e0       	ldi	r24, 0x0D	; 13
 232:	93 e0       	ldi	r25, 0x03	; 3
 234:	21 50       	subi	r18, 0x01	; 1
 236:	80 40       	sbci	r24, 0x00	; 0
 238:	90 40       	sbci	r25, 0x00	; 0
 23a:	e1 f7       	brne	.-8      	; 0x234 <__vector_1+0xe0>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <__vector_1+0xea>
 23e:	00 00       	nop
				_delay_ms(1000);
			}
			timer_counter = 0;
 240:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <timer_counter>
 244:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <timer_counter+0x1>
 248:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <timer_counter+0x2>
 24c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <timer_counter+0x3>
			rising_edge = 0;
 250:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <rising_edge>
			sensor1_working = 0; // clear flag to indicate that sensor 1 is done
 254:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <sensor1_working>
		}
	}
}
 258:	ff 91       	pop	r31
 25a:	ef 91       	pop	r30
 25c:	bf 91       	pop	r27
 25e:	af 91       	pop	r26
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	7f 91       	pop	r23
 266:	6f 91       	pop	r22
 268:	5f 91       	pop	r21
 26a:	4f 91       	pop	r20
 26c:	3f 91       	pop	r19
 26e:	2f 91       	pop	r18
 270:	0f 90       	pop	r0
 272:	0f be       	out	0x3f, r0	; 63
 274:	0f 90       	pop	r0
 276:	1f 90       	pop	r1
 278:	18 95       	reti

0000027a <__vector_2>:


ISR(INT1_vect){
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	2f 93       	push	r18
 286:	3f 93       	push	r19
 288:	4f 93       	push	r20
 28a:	5f 93       	push	r21
 28c:	6f 93       	push	r22
 28e:	7f 93       	push	r23
 290:	8f 93       	push	r24
 292:	9f 93       	push	r25
 294:	af 93       	push	r26
 296:	bf 93       	push	r27
 298:	ef 93       	push	r30
 29a:	ff 93       	push	r31
	if (sensor1_working == 0) { // check if sensor 1 is not in use
 29c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <sensor1_working>
 2a0:	81 11       	cpse	r24, r1
 2a2:	71 c0       	rjmp	.+226    	; 0x386 <__vector_2+0x10c>
		sensor2_working = 1; // set flag to indicate that sensor 2 is in use
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		if (rising_edge == 0){
 2aa:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <rising_edge>
 2ae:	81 11       	cpse	r24, r1
 2b0:	0d c0       	rjmp	.+26     	; 0x2cc <__vector_2+0x52>
			TCNT0 = 0x00;
 2b2:	12 be       	out	0x32, r1	; 50
			rising_edge = 1;
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <rising_edge>
			timer_counter = 0;
 2ba:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <timer_counter>
 2be:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <timer_counter+0x1>
 2c2:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <timer_counter+0x2>
 2c6:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <timer_counter+0x3>
 2ca:	5d c0       	rjmp	.+186    	; 0x386 <__vector_2+0x10c>
			} else {
			distance1 = (timer_counter * 256 + TCNT0) / 68;
 2cc:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <timer_counter>
 2d0:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <timer_counter+0x1>
 2d4:	a0 91 65 00 	lds	r26, 0x0065	; 0x800065 <timer_counter+0x2>
 2d8:	b0 91 66 00 	lds	r27, 0x0066	; 0x800066 <timer_counter+0x3>
 2dc:	ba 2f       	mov	r27, r26
 2de:	a9 2f       	mov	r26, r25
 2e0:	98 2f       	mov	r25, r24
 2e2:	88 27       	eor	r24, r24
 2e4:	22 b7       	in	r18, 0x32	; 50
 2e6:	bc 01       	movw	r22, r24
 2e8:	cd 01       	movw	r24, r26
 2ea:	62 0f       	add	r22, r18
 2ec:	71 1d       	adc	r23, r1
 2ee:	81 1d       	adc	r24, r1
 2f0:	91 1d       	adc	r25, r1
 2f2:	24 e4       	ldi	r18, 0x44	; 68
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	0e 94 3a 02 	call	0x474	; 0x474 <__udivmodsi4>
 2fe:	20 93 6d 00 	sts	0x006D, r18	; 0x80006d <distance1>
 302:	30 93 6e 00 	sts	0x006E, r19	; 0x80006e <distance1+0x1>
 306:	40 93 6f 00 	sts	0x006F, r20	; 0x80006f <distance1+0x2>
 30a:	50 93 70 00 	sts	0x0070, r21	; 0x800070 <distance1+0x3>
			if (distance1 < 20.0) {
 30e:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <distance1>
 312:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <distance1+0x1>
 316:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <distance1+0x2>
 31a:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <distance1+0x3>
 31e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__floatunsisf>
 322:	20 e0       	ldi	r18, 0x00	; 0
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	40 ea       	ldi	r20, 0xA0	; 160
 328:	51 e4       	ldi	r21, 0x41	; 65
 32a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__cmpsf2>
 32e:	88 23       	and	r24, r24
 330:	f4 f4       	brge	.+60     	; 0x36e <__vector_2+0xf4>
				PORTC &= ~(1<<1);
 332:	85 b3       	in	r24, 0x15	; 21
 334:	8d 7f       	andi	r24, 0xFD	; 253
 336:	85 bb       	out	0x15, r24	; 21
				PORTA |= (1<<2);
 338:	8b b3       	in	r24, 0x1b	; 27
 33a:	84 60       	ori	r24, 0x04	; 4
 33c:	8b bb       	out	0x1b, r24	; 27
				PORTA |= (1<<0);
 33e:	8b b3       	in	r24, 0x1b	; 27
 340:	81 60       	ori	r24, 0x01	; 1
 342:	8b bb       	out	0x1b, r24	; 27
 344:	2f e3       	ldi	r18, 0x3F	; 63
 346:	8d e0       	ldi	r24, 0x0D	; 13
 348:	93 e0       	ldi	r25, 0x03	; 3
 34a:	21 50       	subi	r18, 0x01	; 1
 34c:	80 40       	sbci	r24, 0x00	; 0
 34e:	90 40       	sbci	r25, 0x00	; 0
 350:	e1 f7       	brne	.-8      	; 0x34a <__vector_2+0xd0>
 352:	00 c0       	rjmp	.+0      	; 0x354 <__vector_2+0xda>
 354:	00 00       	nop
				_delay_ms(1000);
				PORTA &= ~(1<<0);
 356:	8b b3       	in	r24, 0x1b	; 27
 358:	8e 7f       	andi	r24, 0xFE	; 254
 35a:	8b bb       	out	0x1b, r24	; 27
 35c:	2f e3       	ldi	r18, 0x3F	; 63
 35e:	8d e0       	ldi	r24, 0x0D	; 13
 360:	93 e0       	ldi	r25, 0x03	; 3
 362:	21 50       	subi	r18, 0x01	; 1
 364:	80 40       	sbci	r24, 0x00	; 0
 366:	90 40       	sbci	r25, 0x00	; 0
 368:	e1 f7       	brne	.-8      	; 0x362 <__vector_2+0xe8>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <__vector_2+0xf2>
 36c:	00 00       	nop
				_delay_ms(1000);
			}
			timer_counter = 0;
 36e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <timer_counter>
 372:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <timer_counter+0x1>
 376:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <timer_counter+0x2>
 37a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <timer_counter+0x3>
			rising_edge= 0;
 37e:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <rising_edge>
			sensor2_working = 0; // clear flag to indicate that sensor 2 is done
 382:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
	}
}
 386:	ff 91       	pop	r31
 388:	ef 91       	pop	r30
 38a:	bf 91       	pop	r27
 38c:	af 91       	pop	r26
 38e:	9f 91       	pop	r25
 390:	8f 91       	pop	r24
 392:	7f 91       	pop	r23
 394:	6f 91       	pop	r22
 396:	5f 91       	pop	r21
 398:	4f 91       	pop	r20
 39a:	3f 91       	pop	r19
 39c:	2f 91       	pop	r18
 39e:	0f 90       	pop	r0
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	0f 90       	pop	r0
 3a4:	1f 90       	pop	r1
 3a6:	18 95       	reti

000003a8 <__cmpsf2>:
 3a8:	0e 94 16 02 	call	0x42c	; 0x42c <__fp_cmp>
 3ac:	08 f4       	brcc	.+2      	; 0x3b0 <__cmpsf2+0x8>
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	08 95       	ret

000003b2 <__floatunsisf>:
 3b2:	e8 94       	clt
 3b4:	09 c0       	rjmp	.+18     	; 0x3c8 <__floatsisf+0x12>

000003b6 <__floatsisf>:
 3b6:	97 fb       	bst	r25, 7
 3b8:	3e f4       	brtc	.+14     	; 0x3c8 <__floatsisf+0x12>
 3ba:	90 95       	com	r25
 3bc:	80 95       	com	r24
 3be:	70 95       	com	r23
 3c0:	61 95       	neg	r22
 3c2:	7f 4f       	sbci	r23, 0xFF	; 255
 3c4:	8f 4f       	sbci	r24, 0xFF	; 255
 3c6:	9f 4f       	sbci	r25, 0xFF	; 255
 3c8:	99 23       	and	r25, r25
 3ca:	a9 f0       	breq	.+42     	; 0x3f6 <__floatsisf+0x40>
 3cc:	f9 2f       	mov	r31, r25
 3ce:	96 e9       	ldi	r25, 0x96	; 150
 3d0:	bb 27       	eor	r27, r27
 3d2:	93 95       	inc	r25
 3d4:	f6 95       	lsr	r31
 3d6:	87 95       	ror	r24
 3d8:	77 95       	ror	r23
 3da:	67 95       	ror	r22
 3dc:	b7 95       	ror	r27
 3de:	f1 11       	cpse	r31, r1
 3e0:	f8 cf       	rjmp	.-16     	; 0x3d2 <__floatsisf+0x1c>
 3e2:	fa f4       	brpl	.+62     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3e4:	bb 0f       	add	r27, r27
 3e6:	11 f4       	brne	.+4      	; 0x3ec <__floatsisf+0x36>
 3e8:	60 ff       	sbrs	r22, 0
 3ea:	1b c0       	rjmp	.+54     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3ec:	6f 5f       	subi	r22, 0xFF	; 255
 3ee:	7f 4f       	sbci	r23, 0xFF	; 255
 3f0:	8f 4f       	sbci	r24, 0xFF	; 255
 3f2:	9f 4f       	sbci	r25, 0xFF	; 255
 3f4:	16 c0       	rjmp	.+44     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3f6:	88 23       	and	r24, r24
 3f8:	11 f0       	breq	.+4      	; 0x3fe <__floatsisf+0x48>
 3fa:	96 e9       	ldi	r25, 0x96	; 150
 3fc:	11 c0       	rjmp	.+34     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 3fe:	77 23       	and	r23, r23
 400:	21 f0       	breq	.+8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 402:	9e e8       	ldi	r25, 0x8E	; 142
 404:	87 2f       	mov	r24, r23
 406:	76 2f       	mov	r23, r22
 408:	05 c0       	rjmp	.+10     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 40a:	66 23       	and	r22, r22
 40c:	71 f0       	breq	.+28     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 40e:	96 e8       	ldi	r25, 0x86	; 134
 410:	86 2f       	mov	r24, r22
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	2a f0       	brmi	.+10     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 418:	9a 95       	dec	r25
 41a:	66 0f       	add	r22, r22
 41c:	77 1f       	adc	r23, r23
 41e:	88 1f       	adc	r24, r24
 420:	da f7       	brpl	.-10     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 422:	88 0f       	add	r24, r24
 424:	96 95       	lsr	r25
 426:	87 95       	ror	r24
 428:	97 f9       	bld	r25, 7
 42a:	08 95       	ret

0000042c <__fp_cmp>:
 42c:	99 0f       	add	r25, r25
 42e:	00 08       	sbc	r0, r0
 430:	55 0f       	add	r21, r21
 432:	aa 0b       	sbc	r26, r26
 434:	e0 e8       	ldi	r30, 0x80	; 128
 436:	fe ef       	ldi	r31, 0xFE	; 254
 438:	16 16       	cp	r1, r22
 43a:	17 06       	cpc	r1, r23
 43c:	e8 07       	cpc	r30, r24
 43e:	f9 07       	cpc	r31, r25
 440:	c0 f0       	brcs	.+48     	; 0x472 <__fp_cmp+0x46>
 442:	12 16       	cp	r1, r18
 444:	13 06       	cpc	r1, r19
 446:	e4 07       	cpc	r30, r20
 448:	f5 07       	cpc	r31, r21
 44a:	98 f0       	brcs	.+38     	; 0x472 <__fp_cmp+0x46>
 44c:	62 1b       	sub	r22, r18
 44e:	73 0b       	sbc	r23, r19
 450:	84 0b       	sbc	r24, r20
 452:	95 0b       	sbc	r25, r21
 454:	39 f4       	brne	.+14     	; 0x464 <__fp_cmp+0x38>
 456:	0a 26       	eor	r0, r26
 458:	61 f0       	breq	.+24     	; 0x472 <__fp_cmp+0x46>
 45a:	23 2b       	or	r18, r19
 45c:	24 2b       	or	r18, r20
 45e:	25 2b       	or	r18, r21
 460:	21 f4       	brne	.+8      	; 0x46a <__fp_cmp+0x3e>
 462:	08 95       	ret
 464:	0a 26       	eor	r0, r26
 466:	09 f4       	brne	.+2      	; 0x46a <__fp_cmp+0x3e>
 468:	a1 40       	sbci	r26, 0x01	; 1
 46a:	a6 95       	lsr	r26
 46c:	8f ef       	ldi	r24, 0xFF	; 255
 46e:	81 1d       	adc	r24, r1
 470:	81 1d       	adc	r24, r1
 472:	08 95       	ret

00000474 <__udivmodsi4>:
 474:	a1 e2       	ldi	r26, 0x21	; 33
 476:	1a 2e       	mov	r1, r26
 478:	aa 1b       	sub	r26, r26
 47a:	bb 1b       	sub	r27, r27
 47c:	fd 01       	movw	r30, r26
 47e:	0d c0       	rjmp	.+26     	; 0x49a <__udivmodsi4_ep>

00000480 <__udivmodsi4_loop>:
 480:	aa 1f       	adc	r26, r26
 482:	bb 1f       	adc	r27, r27
 484:	ee 1f       	adc	r30, r30
 486:	ff 1f       	adc	r31, r31
 488:	a2 17       	cp	r26, r18
 48a:	b3 07       	cpc	r27, r19
 48c:	e4 07       	cpc	r30, r20
 48e:	f5 07       	cpc	r31, r21
 490:	20 f0       	brcs	.+8      	; 0x49a <__udivmodsi4_ep>
 492:	a2 1b       	sub	r26, r18
 494:	b3 0b       	sbc	r27, r19
 496:	e4 0b       	sbc	r30, r20
 498:	f5 0b       	sbc	r31, r21

0000049a <__udivmodsi4_ep>:
 49a:	66 1f       	adc	r22, r22
 49c:	77 1f       	adc	r23, r23
 49e:	88 1f       	adc	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	1a 94       	dec	r1
 4a4:	69 f7       	brne	.-38     	; 0x480 <__udivmodsi4_loop>
 4a6:	60 95       	com	r22
 4a8:	70 95       	com	r23
 4aa:	80 95       	com	r24
 4ac:	90 95       	com	r25
 4ae:	9b 01       	movw	r18, r22
 4b0:	ac 01       	movw	r20, r24
 4b2:	bd 01       	movw	r22, r26
 4b4:	cf 01       	movw	r24, r30
 4b6:	08 95       	ret

000004b8 <_exit>:
 4b8:	f8 94       	cli

000004ba <__stop_program>:
 4ba:	ff cf       	rjmp	.-2      	; 0x4ba <__stop_program>
